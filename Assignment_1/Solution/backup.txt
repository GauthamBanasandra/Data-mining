import copy
import csv
import random
import math

__author__ = 'gauth_000'


def compute_measures(data, headers):
    minval = [math.inf for i in range(len(data[0]) - 1)]
    maxval = [0 for i in range(len(data[0]) - 1)]
    mean = [0 for i in range(len(data[0]) - 1)]
    columns = [[] for i in range(len(data[0]) - 1)]

    # computing min, max and mean
    for row in data:
        for i in range(len(row) - 1):
            if eval(row[i]) < minval[i]:
                minval[i] = eval(row[i])
            if eval(row[i]) > maxval[i]:
                maxval[i] = eval(row[i])
            mean[i] += eval(row[i])
            columns[i].append(row[i])
    mean = [num / len(data) for num in mean]

    # computing median
    median = []
    mid = (len(data) + 1) // 2
    if len(data) % 2:
        median = [sorted(columns[i])[mid] for i in range(len(columns))]
    else:
        for i in range(len(columns)):
            median_ = sorted(map(eval, columns[i]))
            median.append((median_[mid - 1] + median_[mid]) / 2)

    # computing standard deviation
    stdev = copy.deepcopy(columns)
    for col in range(len(stdev)):
        for i in range(len(stdev[col])):
            stdev[col][i] = (eval(stdev[col][i]) - mean[col]) ** 2
        stdev[col] = (sum(stdev[col]) / len(stdev[col])) ** 0.5

    for col in range(len(headers) - 1):
        print(headers[col], ':')
        print('min=', minval[col])
        print('max=', maxval[col])
        print('mean=', mean[col])
        print('median=', median[col])
        print('std. dev=', stdev[col])
        print()


with open('iris.csv') as file:
    data = [row for row in csv.reader(file, delimiter=',')]
    testdata = sorted([data[i] for i in random.sample(range(1, len(data)), 10)], key=lambda x: x[len(data[0]) - 1])
    print('step-1 : printing id', data[0], sep='\n')
    for row in testdata:
        print(row)
    print('\nstep-2 : summary statistics')
    compute_measures(testdata, data[0])
    species_ = []
    species = []
    i = 0
    species_.append(testdata[0])
    for j in range(1, len(testdata)):
        if testdata[j][len(testdata[j]) - 1] == testdata[i][len(testdata[i]) - 1]:
            species_.append(testdata[j])
        else:
            species.append(species_)
            species_ = [testdata[j]]
        i += 1
    species.append(species_)
    for class_ in species:
        print('class', class_[0][len(class_[0]) - 1], ':')
        compute_measures(class_, data[0])